/**
 * @file talk.js
 * @author scott@converse.ai
 * @description Send one, or more, messages that will use specific
 * options
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const MessageMedia = require('@converseai/plugins-sdk').Payloads.Module.MessageMedia;
const RichMedia = require('@converseai/plugins-sdk').Payloads.RichMedia;
const Utils = require('../lib/utils.js');

module.exports = function talk(app, body) {

  var threadId = body.payload.channelSetting.threadId;
  if (threadId.startsWith("sms_")) {
    app.send(Status.SUCCESS);
    return;
  }

  var registrationData = body.payload.registrationData;
  var callbackUri = registrationData.callback_uri;

  var status = Status.SUCCESS;
  var messageType = MessageMedia.TYPE_COMMENT;
  var queue = false;

  var moduleParam = body.payload.moduleParam;

  var sendMediaAs = moduleParam.send_media_as;
  if (sendMediaAs == "QUESTION") {
    messageType = MessageMedia.TYPE_QUESTION;
  } else if (sendMediaAs == "ANSWER") {
    status = Status.STOP;
  } else {
    // This is a queued comment, don't tell the conversation to stop
    queue = true;
  }

  var moduleOptions = {
    voice: moduleParam.voice,
    loop: moduleParam.loop,
  };
  if (messageType == MessageMedia.TYPE_QUESTION) {

    moduleOptions.bargeIn = moduleParam.bargeIn;

    var inputOptions = moduleParam.options;
    if (inputOptions) {
      if (inputOptions.timeout) {
        moduleOptions.timeout = inputOptions.timeout;
      }
      if (inputOptions.submitOnHash) {
        moduleOptions.submitOnHash = inputOptions.submitOnHash;
      }
      if (inputOptions.maxDigits) {
        moduleOptions.maxDigits = inputOptions.maxDigits;
      }
    }
  }

  var userId = body.payload.channelSetting.userId;
  var threadId = body.payload.channelSetting.threadId;

  var options = Utils.getOutboundOptions(threadId, registrationData, moduleOptions);

  var ncco = [];

  if (messageType == MessageMedia.TYPE_QUESTION) {
    var item = {
      action: "talk",
      text: moduleParam.message,
      bargeIn: options.bargeIn,
      loop: options.loop
    };
    if (options.voiceName) {
      item.voiceName = options.voiceName;
    }
    ncco.push(item);

    var item = {
      action: "input",
      submitOnHash: options.submitOnHash,
      timeOut: options.timeOut,
      eventUrl: [
        callbackUri + "?action=response&to=" + threadId + "&from=" + userId,
      ],
      eventMethod: "POST"
    };

    if (options.maxDigits) {
      item.maxDigits = options.maxDigits;
    }

    ncco.push(item);
  } else {
    var item = {
      action: "talk",
      text: moduleParam.message,
      loop: options.loop,
    };
    if (options.voiceName) {
      item.voiceName = options.voiceName;
    }
    ncco.push(item);
  }

  var richMedia = new RichMedia();
  richMedia.setRichMediaType("ncco");
  richMedia.setRichMediaObject({
    ncco: ncco,
    queue: queue,
  });

  var message = new MessageMedia();
  message.setMessageType(messageType);
  message.setMessageMedia(richMedia);

  var response = new ModuleResponse();
  response.setMessage(message);
  app.send(status, response);

};