/**
 * @file connect.js
 * @author scott@converse.ai
 * @description
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const MessageMedia = require('@converseai/plugins-sdk').Payloads.Module.MessageMedia;
const RichMedia = require('@converseai/plugins-sdk').Payloads.RichMedia;
const Utils = require('../lib/utils.js');

module.exports = function connect(app, body) {

  var registrationData = body.payload.registrationData;

  var channelSetting = body.payload.channelSetting;
  var moduleParam = body.payload.moduleParam;

  var userId = channelSetting.userId;

  var threadId = Utils.sanitizeNumber(moduleParam.from);
  if (!threadId || threadId == "") {
    threadId = channelSetting.threadId;
    if (threadId.startsWith("sms_")) {
      app.send(Status.SUCCESS);
      return;
    }
  }

  var timeout = moduleParam.timeout;
  if (timeout) {
    timeout = parseInt(timeout);
    if (isNaN(timeout) || timeout < 0) {
      timeout = 5;
    }
  } else {
    timeout = 5;
  }

  var connect_ncco = {
    action: "connect",
    from: threadId,
    timeout: timeout,
    endpoint: [],
  };

  if (moduleParam.machine_detection) {
    switch (moduleParam.machine_detection) {
      case "CONTINUE":
        connect_ncco.machineDetection = "continue";
        break;
      case "HANGUP":
        connect_ncco.machineDetection = "hangup";
        break;
    }
  }

  var fallback = moduleParam.fallback;
  if (fallback && fallback.intent) {
    var callbackUri = registrationData.callback_uri;

    connect_ncco.eventType = "synchronous";
    connect_ncco.eventUrl = [
      callbackUri + "?action=fallback&intent=" + fallback.intent +
      "&to=" + threadId +
      "&from=" + userId +
      "&entities=" + Buffer.from(JSON.stringify(fallback.entities)).toString('base64')
    ];
    connect_ncco.eventMethod = "POST";
  }

  var endpointType = moduleParam.endpoint;
  switch (endpointType) {
    case "PHONE":
      var phoneEndpoint = moduleParam.phone;

      connect_ncco.endpoint.push({
        type: "phone",
        number: Utils.sanitizeNumber(phoneEndpoint.number),
        dtmfAnswer: phoneEndpoint.dtmfAnswer,
      });
      break;
    case "WEBSOCKET":

      var websocketEndpoint = moduleParam.websocket;

      connect_ncco.endpoint.push({
        type: "websocket",
        uri: websocketEndpoint.uri,
        contentType: websocketEndpoint.contentType,
        headers: websocketEndpoint.headers,
      });
      break;
    case "SIP":

      var sipEndpoint = moduleParam.sip;

      connect_ncco.endpoint.push({
        type: "sip",
        uri: sipEndpoint.uri,
      });
      break;
  }

  var ncco = [];

  if (moduleParam.message && moduleParam.message.message) {
    var options = Utils.getOutboundOptions(threadId, registrationData, moduleParam.message);

    var talk_ncco = {
      action: "talk",
      text: moduleParam.message.message,
      loop: options.loop,
    };

    if (options.voiceName) {
      talk_ncco.voiceName = options.voiceName;
    }

    ncco.push(talk_ncco);
  }
  ncco.push(connect_ncco);

  var richMedia = new RichMedia();
  richMedia.setRichMediaType("ncco");
  richMedia.setRichMediaObject({
    ncco: ncco
  });

  var message = new MessageMedia();
  message.setMessageType(MessageMedia.TYPE_COMMENT);
  message.setMessageMedia(richMedia);

  var response = new ModuleResponse();
  response.setMessage(message);
  app.send(Status.SUCCESS, response);

};