/**
 * @file delete_conference.js
 * @author scott@converse.ai
 * @description Delete a conference call that has been created
 * by Create Conference
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils = require('../lib/utils.js');

module.exports = function delete_conference(app, body) {

  var code = body.payload.moduleParam.code;
  if (!code) {
    var response = new ModuleResponse();
    response.setError({
      httpStatus: 400,
      code: "REQUIRED_PARAMS_UNDEFINED",
      description: "Required parameter 'Conference Code' is undefined."
    });
    app.send(Status.SUCCESS, response);
    return;
  }

  Utils.getPluginLocalData(body.caller, "provider", "conference-" + code, function(ok, data) {
    if (!ok) {
      // It is not ok if the get failed or if the data is empty
      if (data) {
        // Not ok with data means there is an error
        var response = new ModuleResponse();
        response.setError({
          httpStatus: 400,
          code: "REQUIRED_PARAMS_UNDEFINED",
          description: "Required parameter 'Conference Code' is undefined."
        });
        app.send(Status.SUCCESS, response);
        return;
      }
      // Not ok with no data, just means that there was nothing to get
      var response = new ModuleResponse();
      app.send(Status.SUCCESS, response);
      return;
    }

    // We get the data object so we can delete the supplied code and the additional code
    // as we have no way of knowing if we were givin the moderator code or the normal code
    if (data.moderatorCode) {
      // We have a moderator code, delete that local data
      Utils.setPluginLocalData(body.caller, "provider", "conference-" + data.moderatorCode, null);
    }
    if (data.code) {
      // We have a normal code, delete that local data
      Utils.setPluginLocalData(body.caller, "provider", "conference-" + data.code, null);
    }

    data.deleted = true;

    var response = new ModuleResponse();
    response.setValue(data);
    app.send(Status.SUCCESS, response);

  });
};