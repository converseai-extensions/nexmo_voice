/**
 * @file create_conference.js
 * @author scott@converse.ai
 * @description Create a conference call and return the access code
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils = require('../lib/utils.js');

function isCodeInUse(caller, code, callback) {

  Utils.getPluginLocalData(caller, "provider", "conference-" + code, function(ok, data) {
    callback(ok && data && data != "");
  });

}

function generatedCode(length, mod) {
  var timestamp = Math.round(((new Date()).getTime() / 1000) + mod).toString()

  return timestamp.substring(timestamp.length - length, timestamp.length);
}

function sendData(app, caller, data) {

  var value = {
    name: data.name,
    code: data.code,
  };

  data.moderator = false;
  Utils.setPluginLocalData(caller, "provider", "conference-" + data.code, data);

  if (data.isModerated) {
    data.moderator = true;
    Utils.setPluginLocalData(caller, "provider", "conference-" + data.moderatorCode, data);

    value.moderator_code = data.moderatorCode;
  }

  var response = new ModuleResponse();
  response.setValue(value);
  app.send(Status.SUCCESS, response);
}

module.exports = function create_conference(app, body) {

  var moduleParam = body.payload.moduleParam;
  var caller = body.caller;

  var data = {
    name: Utils.generateUUID(),
    code: generatedCode(5, 0),
    record: moduleParam.record,
    isModerated: moduleParam.moderator,
  }

  if (moduleParam.record) {
    data.recordOptions = moduleParam.record_options;
  }

  if (data.isModerated) {
    data.moderatorCode = generatedCode(6, 0);
    data.moderatorOptions = moduleParam.moderator_options;
  }

  var codeCounter = 1;

  var modCallbackFunction = function(exists) {
    if (exists) {
      data.moderatorCode = generatedCode(6, codeCounter++);
      isCodeInUse(caller, data.moderatorCode, modCallbackFunction);
      return;
    }

    sendData(app, caller, data);
  };

  var callbackFunction = function(exists) {

    if (exists) {
      data.code = generatedCode(5, codeCounter++);
      isCodeInUse(caller, data.code, callbackFunction);
      return;
    }

    if (data.isModerated) {
      isCodeInUse(caller, data.moderatorCode, modCallbackFunction);
    } else {
      sendData(app, caller, data);
    }
  };
  isCodeInUse(caller, data.code, callbackFunction);
};