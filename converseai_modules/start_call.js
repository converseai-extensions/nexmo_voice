/**
 * @file start_call.js
 * @author scott@converse.ai
 * @description
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.Module.ModuleResponse;
const Utils = require('../lib/utils.js');

module.exports = function start_call(app, body) {

  var registrationData = body.payload.registrationData;
  var inboundURI = registrationData.callback_uri;

  var answerUrl = inboundURI + "?action=inbound";

  var moduleParam = body.payload.moduleParam;

  var intent = moduleParam.intent;
  if (intent && intent.intent) {
    answerUrl = inboundURI + "?action=outbound&intent=" + intent.intent + "&entities=" + Buffer.from(JSON.stringify(intent.entities)).toString('base64')
  }

  var bodyData = {
    answer_url: [answerUrl],
    answer_method: "GET",
    event_url: [inboundURI + "?action=event"],
    event_method: "POST",
  };

  switch (moduleParam.machine_detection) {
    case "CONTINUE":
      bodyData.machineDetection = "continue";
      break;
    case "HANGUP":
      bodyData.machineDetection = "hangup";
      break;
  }

  if (moduleParam.length_timer) {
    var num = parseInt(moduleParam.length_timer);
    if (isNaN(num) || num < 0 || num > 7200) {
      num = 7200;
    }
    bodyData.length_timer = num;
  }
  if (moduleParam.ringing_timer) {
    var num = parseInt(moduleParam.ringing_timer);
    if (isNaN(num) || num < 0) {
      num = 60;
    } else if (num > 120) {
      num = 120;
    }
    bodyData.ringing_timer = num;
  }

  var toEndpoints = moduleParam.to;
  bodyData.to = [];
  for (var i = 0; i < toEndpoints.length; i++) {

    var toEndpoint = toEndpoints[i];

    var toType = toEndpoint.endpoint;
    switch (toType) {
      case "PHONE":
        var phoneEndpoint = toEndpoint.phone;

        bodyData.to.push({
          type: "phone",
          number: phoneEndpoint.number,
          dtmfAnswer: phoneEndpoint.dtmfAnswer,
        });
        break;
      case "WEBSOCKET":

        var websocketEndpoint = toEndpoint.websocket;

        bodyData.to.push({
          type: "websocket",
          uri: websocketEndpoint.uri,
          contentType: websocketEndpoint.contentType,
          headers: websocketEndpoint.headers,
        });
        break;
      case "SIP":

        var sipEndpoint = toEndpoint.sip;

        bodyData.to.push({
          type: "sip",
          uri: sipEndpoint.uri,
        });
        break;
    }

  }

  if (bodyData.to.length == 0) {
    app.fail({
      httpStatus: 400,
      code: "FAILED",
      description: "There are no target endpoints specified for this call.",
    });
    return;
  }

  var fromType = moduleParam.from_endpoint;
  switch (fromType) {
    case "PHONE":
      var phoneEndpoint = moduleParam.from_phone;

      bodyData.from = {
        type: "phone",
        number: phoneEndpoint.number,
        dtmfAnswer: phoneEndpoint.dtmfAnswer,
      };
      break;
    case "WEBSOCKET":

      var websocketEndpoint = moduleParam.from_websocket;

      bodyData.from = {
        type: "websocket",
        uri: websocketEndpoint.uri,
        contentType: websocketEndpoint.contentType,
        headers: websocketEndpoint.headers,
      };
      break;
    case "SIP":

      var sipEndpoint = moduleParam.from_sip;

      bodyData.from = {
        type: "sip",
        uri: sipEndpoint.uri,
      };
      break;
  }


  Utils.getPluginLocalData(body.caller, "provider", "private_key", function(ok, localData) {
    if (!ok || !localData) {
      app.fail({
        httpStatus: 400,
        code: "INVALID_AUTH",
        description: "Invalid application private key"
      });
      return;
    }

    var Nexmo = require('nexmo');

    var nexmo = new Nexmo({
      apiKey: registrationData.api_key,
      apiSecret: registrationData.api_secret,
      applicationId: registrationData.application_id,
      privateKey: localData.privateKey,
    });

    nexmo.calls.create(bodyData, function(error, createResponse) {
      if (error) {
        console.error(error.body);
        app.fail({
          httpStatus: 400,
          code: "FAILED",
          description: error.body
        });
        return;
      }

      var response = new ModuleResponse();
      response.setValue(createResponse);
      app.send(Status.SUCCESS, response);
    });
  });
};