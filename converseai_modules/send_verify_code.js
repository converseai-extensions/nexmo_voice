/**
 * @file send_verify_code.js
 * @author scott@converse.ai
 * @description
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils = require('../lib/utils.js');

module.exports = function send_verify_code(app, body) {

  var registrationData = body.payload.registrationData;
  var moduleParam = body.payload.moduleParam;

  var number = moduleParam.number;
  if (!number) {
    var response = new ModuleResponse();
    response.setError({
      httpStatus: 400,
      code: "REQUIRED_PARAMS_UNDEFINED",
      description: "Required parameter 'Number' is undefined."
    });
    app.send(Status.FAIL, response);
    return;
  }
  var brand = moduleParam.brand;
  if (!brand) {
    var response = new ModuleResponse();
    response.setError({
      httpStatus: 400,
      code: "REQUIRED_PARAMS_UNDEFINED",
      description: "Required parameter 'Brand' is undefined."
    });
    app.send(Status.FAIL, response);
    return;
  }
  var codeLength = moduleParam.code_length;
  if (!codeLength) {
    codeLength = 4;
  }

  const request = {
    number: number,
    brand: brand,
    code_length: codeLength,
  };

  if (moduleParam.country) {
    request.country = moduleParam.country;
  } else {
    // If no country is defined we can do our sanitize logic
    request.number = Utils.sanitizeNumber(number);
  }

  if (moduleParam.sender_id) {
    request.sender_id = moduleParam.sender_id;
  }
  if (moduleParam.language) {
    request.lg = moduleParam.language;
  }
  if (moduleParam.pin_expiry) {
    request.pin_expiry = moduleParam.pin_expiry;
  }
  if (moduleParam.next_event_wait_time) {
    request.next_wait_event = moduleParam.next_event_wait_time;
  }

  createVerify(app, registrationData, request, true);
};

function createVerify(app, registrationData, request, retryOnTen) {

  var Nexmo = require('nexmo');

  var nexmo = new Nexmo({
    apiKey: registrationData.api_key,
    apiSecret: registrationData.api_secret,
  });

  nexmo.verify.request(request, (error, result) => {
    if (error) {
      console.error(error);
      var response = new ModuleResponse();
      response.setError({
        httpStatus: 500,
        code: "FUNCTION_FAILED",
        description: String(error),
      });
      app.send(Status.FAIL, response);
    } else {

      var response = new ModuleResponse();
      response.setValue(result);

      switch (result.status) {
        case "0":
          break;
        case "10":
          if (retryOnTen) {
            Utils.cancelVerifyCode(registrationData, result.request_id, 3, function(ok, result) {
              if (!ok) {
                console.error(result);
                response.setError({
                  httpStatus: 500,
                  code: "FUNCTION_FAILED",
                  description: result,
                });
                app.send(Status.FAIL, response);
                return;
              }
              createVerify(app, registrationData, request, false);
            });
            return;
          } else {
            response.setError({
              httpStatus: 500,
              code: "FUNCTION_FAILED",
              description: result.error_text,
            });
            app.send(Status.FAIL, response);
            return;
          }
          break;
        default:
          response.setError({
            httpStatus: 500,
            code: "FUNCTION_FAILED",
            description: result.error_text,
          });
          app.send(Status.FAIL, response);
          return;
      }

      app.send(Status.SUCCESS, response);
    }
  });
}