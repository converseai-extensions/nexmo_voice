/**
 * @file check_verify_code.js
 * @author scott@converse.ai
 * @description
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const ModuleResponse = require('@converseai/plugins-sdk').Payloads.ModuleResponse;
const Utils = require('../lib/utils.js');

module.exports = function check_verify_code(app, body) {

  var registrationData = body.payload.registrationData;
  var moduleParam = body.payload.moduleParam;

  var requestId = moduleParam.request_id;
  if (!requestId) {
    var response = new ModuleResponse();
    response.setError({
      httpStatus: 400,
      code: "REQUIRED_PARAMS_UNDEFINED",
      description: "Required parameter 'Request Id' is undefined."
    });
    app.send(Status.FAIL, response);
    return;
  }

  var code = moduleParam.code;
  if (!code) {
    Utils.cancelVerifyCode(registrationData, requestId, 3, null);
    var response = new ModuleResponse();
    response.setError({
      httpStatus: 400,
      code: "REQUIRED_PARAMS_UNDEFINED",
      description: "Required parameter 'PIN Code' is undefined."
    });
    app.send(Status.FAIL, response);
    return;
  }

  var Nexmo = require('nexmo');

  var nexmo = new Nexmo({
    apiKey: registrationData.api_key,
    apiSecret: registrationData.api_secret,
  });

  var checkBody = {
    request_id: requestId,
    code: code,
  };

  nexmo.verify.check(checkBody, (error, result) => {
    if (error) {
      Utils.cancelVerifyCode(registrationData, requestId, 3, null);
      console.error(error);
      var response = new ModuleResponse();
      response.setError({
        httpStatus: 500,
        code: "FUNCTION_FAILED",
        description: String(error),
      });
      response.setExit("invalid");
      app.send(Status.FAIL, response);
    } else {
      //console.log(result);
      var response = new ModuleResponse();
      response.setValue(result);

      switch (result.status) {
        case "0":
          response.setExit("valid");
          break;
        case "2":
        case "3":
        case "16":
          response.setExit("retry");
          break;
        default:
          Utils.cancelVerifyCode(registrationData, requestId, 3, null);
          response.setExit("invalid");
          break;
      }

      app.send(Status.SUCCESS, response);
    }
  });
};