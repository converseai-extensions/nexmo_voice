/**
 * @file converseai_providers.js
 * @author scott@converse.ai
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';

const Status = require('@converseai/plugins-sdk').Status;
const RegistrationDataResponse = require('@converseai/plugins-sdk').Payloads.RegistrationDataResponse;
const Utils = require('./lib/utils.js');

var onProviderRegister = function (app, body) {

  var provider = body.caller.provider;
  var registrationData = body.payload.registrationData;
  var inboundURI = body.payload.inboundURI;

  if (inboundURI) {
    registrationData.callback_uri = inboundURI;
  }
  if (!registrationData.inbound) {
    registrationData.inbound = {};
  }

  var api_key = registrationData.api_key;
  var api_secret = registrationData.api_secret;

  var application_id = registrationData.application_id;
  if (!application_id) {
    Utils.createApplication(api_key, api_secret, inboundURI, provider, function (ok, application) {

      application_id = application.id;
      registrationData.application_id = application_id;

      Utils.updateLinkNumbers(api_key, api_secret, application_id, inboundURI, registrationData.inbound.numbers, registrationData.sms_numbers);

      Utils.setPluginLocalData(body.caller, "provider", "private_key", {
        privateKey: application.keys.private_key,
      });

      var response = new RegistrationDataResponse();
      response.setRegistrationData(registrationData);
      app.send(Status.SUCCESS, response);

    });
  } else {
    Utils.updateApplication(api_key, api_secret, application_id, inboundURI, provider);

    Utils.updateLinkNumbers(api_key, api_secret, application_id, inboundURI, registrationData.inbound.numbers, registrationData.sms_numbers);

    var response = new RegistrationDataResponse();
    response.setRegistrationData(registrationData);
    app.send(Status.SUCCESS, response);
  }
}

var onProviderUnregister = function (app, body) {

  var registrationData = body.payload.registrationData;;

  var api_key = registrationData.api_key;
  var api_secret = registrationData.api_secret;

  var application_id = registrationData.application_id;

  if (application_id) {
    Utils.deleteApplication(api_key, api_secret, application_id);

    Utils.setPluginLocalData(body.caller, "provider", "private_key", null);
  }

  app.send(Status.SUCCESS);
}

module.exports = {
  onProviderRegister: onProviderRegister,
  onProviderUnregister: onProviderUnregister
}